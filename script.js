// --- DOM Elements ---
const questionTitleEl = document.getElementById("question-title");
const optionsEl = document.getElementById("options");
const backBtn = document.getElementById("back-btn");
const nextBtn = document.getElementById("next-btn");
const progressBar = document.getElementById("progress-bar");

// --- Age Verification Logic ---
document.addEventListener('DOMContentLoaded', () => {
    const ageModal = document.getElementById('age-verification-modal');
    const confirmBtn = document.getElementById('age-confirm-btn');
    const denyBtn = document.getElementById('age-deny-btn');
    const closeBtn = ageModal.querySelector('.close-button');

    const isVerified = sessionStorage.getItem('ageVerified'); // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Å–µ—Å—ñ–π–Ω–µ —Å—Ö–æ–≤–∏—â–µ

    if (isVerified === 'true') {
        ageModal.style.display = 'none'; // –Ø–∫—â–æ –≤–∂–µ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ, –ø—Ä–∏—Ö–æ–≤—É—î–º–æ –º–æ–¥–∞–ª
        document.body.classList.remove('modal-open'); // –í–∏–¥–∞–ª—è—î–º–æ –∫–ª–∞—Å, —è–∫—â–æ –≤—ñ–Ω –±—É–≤
        initializeQuiz(); // –ó–∞–ø—É—Å–∫–∞—î–º–æ –∫–≤—ñ–∑ –æ–¥—Ä–∞–∑—É
    } else {
        ageModal.style.display = 'flex'; // –ü–æ–∫–∞–∑—É—î–º–æ –º–æ–¥–∞–ª
        document.body.classList.add('modal-open'); // –î–æ–¥–∞—î–º–æ –∫–ª–∞—Å –¥–ª—è –±–ª–æ–∫—É–≤–∞–Ω–Ω—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∏ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç—É
    }

    confirmBtn.addEventListener('click', () => {
        sessionStorage.setItem('ageVerified', 'true'); // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Å—Ç–∞—Ç—É—Å
        ageModal.style.display = 'none';
        document.body.classList.remove('modal-open');
        initializeQuiz(); // –ó–∞–ø—É—Å–∫–∞—î–º–æ –∫–≤—ñ–∑
    });

    denyBtn.addEventListener('click', () => {
        sessionStorage.setItem('ageVerified', 'false'); // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Å—Ç–∞—Ç—É—Å (–Ω–µ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ)
        window.location.href = 'https://www.google.com/'; // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è—î–º–æ
    });

    closeBtn.addEventListener('click', () => {
        // –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑–∞–∫—Ä–∏–≤–∞—î –º–æ–¥–∞–ª, –Ω–µ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∏–≤—à–∏ –≤—ñ–∫, —Ä–æ–∑–≥–ª—è–¥–∞—î–º–æ —Ü–µ —è–∫ –≤—ñ–¥–º–æ–≤—É
        sessionStorage.setItem('ageVerified', 'false');
        window.location.href = 'https://www.google.com/'; // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è—î–º–æ
    });
});

// –ü–ï–†–ï–ú–Ü–°–¢–ò–ú–û initializeQuiz() –ó –ö–Ü–ù–¶–Ø –§–ê–ô–õ–£ –°–Æ–î–ò –ê–ë–û –ü–ï–†–ï–ö–û–ù–ê–ô–¢–ï–°–Ø, –©–û initializeQuiz()
// –í–ò–ö–õ–ò–ö–ê–Ñ–¢–¨–°–Ø –¢–Ü–õ–¨–ö–ò –ü–Ü–°–õ–Ø –ü–Ü–î–¢–í–ï–†–î–ñ–ï–ù–ù–Ø –í–Ü–ö–£.
// –Ø–∫—â–æ initializeQuiz() –∑–Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –≤ –∫—ñ–Ω—Ü—ñ script.js, —Ç–æ–¥—ñ –≤–∏–¥–∞–ª—ñ—Ç—å –π–æ–≥–æ –∑–≤—ñ–¥—Ç–∏
// —ñ –ø–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—å, —â–æ –≤—ñ–Ω –≤–∏–∫–ª–∏–∫–∞—î—Ç—å—Å—è —Ç—ñ–ª—å–∫–∏ –≤ –æ–±—Ä–æ–±–Ω–∏–∫–∞—Ö –ø–æ–¥—ñ–π confirmBtn.
// –Ø–∫—â–æ initializeQuiz() –≤–∂–µ –æ–±–≥–æ—Ä–Ω—É—Ç–∏–π –≤ —è–∫—É—Å—å —Ñ—É–Ω–∫—Ü—ñ—é-—ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ç–æ—Ä, —Ç–æ –ø—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—å,
// —â–æ —Ü—è —Ñ—É–Ω–∫—Ü—ñ—è –≤–∏–∫–ª–∏–∫–∞—î—Ç—å—Å—è –ø—ñ—Å–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –≤—ñ–∫—É.
// –£ –≤–∞—à–æ–º—É –≤–∏–ø–∞–¥–∫—É initializeQuiz() –≤–∏–∫–ª–∏–∫–∞—î—Ç—å—Å—è –≤ –∫—ñ–Ω—Ü—ñ —Ñ–∞–π–ª—É, —Ç–æ–º—É –π–æ–≥–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ
// –≤–∏–¥–∞–ª–∏—Ç–∏ –∑ –∫—ñ–Ω—Ü—è —ñ –≤–∏–∫–ª–∏–∫–∞—Ç–∏ —Ç—ñ–ª—å–∫–∏ –ø—ñ—Å–ª—è —É—Å–ø—ñ—à–Ω–æ—ó –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—ó.

// ... –≤–∞—à —ñ—Å–Ω—É—é—á–∏–π –∫–æ–¥ script.js –ø–æ—á–∏–Ω–∞—î—Ç—å—Å—è —Ç—É—Ç ...
// (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è DOM-–µ–ª–µ–º–µ–Ω—Ç—ñ–≤, quizData, stepHistory —Ç–æ—â–æ)

// –ó–ê–£–í–ê–ñ–¢–ï: –Ø–∫—â–æ –≤–∏ –≤–∂–µ –º–∞—î—Ç–µ initializeQuiz() –≤ –∫—ñ–Ω—Ü—ñ script.js, –í–ò–î–ê–õ–Ü–¢–¨ –ô–û–ì–û –ó–í–Ü–î–¢–ò,
// –æ—Å–∫—ñ–ª—å–∫–∏ —Ç–µ–ø–µ—Ä –≤—ñ–Ω –≤–∏–∫–ª–∏–∫–∞—î—Ç—å—Å—è –ª–∏—à–µ –ø—ñ—Å–ª—è —É—Å–ø—ñ—à–Ω–æ—ó –≤—ñ–∫–æ–≤–æ—ó –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—ó.

// --- State ---
let quizData = {};
let stepHistory = ["step1"];
let userAnswers = {};
let totalSteps = 4; // Approximate number of steps for progress bar

// --- Emoji Mapping ---
const optionEmojis = {
  "–î–ª—è —Å–µ–±–µ": "üë§",
  "–î–ª—è –Ω–∞—Å –æ–±–æ—Ö": "üë©‚Äç‚ù§Ô∏è‚Äçüë®",
  "–î–ª—è –≥—ñ–≥—ñ—î–Ω–∏ —Ç–∞ –∑–¥–æ—Ä–æ–≤‚Äô—è": "üåø",
  "–î–ª—è –ø–æ–¥–∞—Ä—É–Ω–∫–∞": "üéÅ",
  "–ñ—ñ–Ω–∫–∞": "‚ôÄÔ∏è",
  "–ß–æ–ª–æ–≤—ñ–∫": "‚ôÇÔ∏è",
  "–í–∞–≥—ñ–Ω–∞–ª—å–Ω–∞ —Å—Ç–∏–º—É–ª—è—Ü—ñ—è": "‚ú®",
  "–ö–ª—ñ—Ç–æ—Ä–∞–ª—å–Ω–∞ —Å—Ç–∏–º—É–ª—è—Ü—ñ—è": "üå∏",
  "–ê–Ω–∞–ª—å–Ω–∞ —Å—Ç–∏–º—É–ª—è—Ü—ñ—è": "üçë",
  "–ï—Ä–µ–∫—Ü—ñ–π–Ω—ñ –∑–∞—Å–æ–±–∏": "üí™",
  "–ï–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞–ª—å–Ω—ñ —ñ–≥—Ä–∞—à–∫–∏": "‚õìÔ∏è",
  "–°—Ü–µ–Ω–∞—Ä–Ω–∏–π –Ω–∞–±—ñ—Ä": "üé≠",
  "–ú–∞—Å—Ç—É—Ä–±–∞—Ç–æ—Ä–∏": "üçÜ",
  "–ö—ñ–ª—å—Ü—è": "üíç",
  "–í—ñ–±—Ä–∞—Ç–æ—Ä–∏ –¥–ª—è –¥–≤–æ—Ö": "üíû",
  "–Ü–≥—Ä–æ–≤—ñ –Ω–∞–±–æ—Ä–∏": "üé≤",
  "–°—Ç—Ä–∞–ø–æ–Ω–∏": "ü¶Ñ",
  "–Ü–Ω—Ç–∏–º–Ω–∞ –∫–æ—Å–º–µ—Ç–∏–∫–∞": "üß¥",
  "–ó–º–∞–∑–∫–∏": "üíß",
  "–ü—Ä–µ–∑–µ—Ä–≤–∞—Ç–∏–≤–∏": "üõ°Ô∏è",
  "–î–æ–≥–ª—è–¥ –∑–∞ —Ç—ñ–ª–æ–º": "üßº",
  "–ë–µ–∑–ø–µ–∫–∞": "‚õëÔ∏è",
  "–ú–µ–Ω—Å—Ç—Ä—É–∞–ª—å–Ω—ñ —Ç–æ–≤–∞—Ä–∏": "ü©∏",
  "–£–Ω—ñ–≤–µ—Ä—Å–∞–ª—å–Ω–∏–π –Ω–∞–±—ñ—Ä": "üéÄ",
  "–ü–∞—Ä—Ñ—É–º–∏": "üëÉ",
  "–°–µ–∫—Å-—ñ–≥—Ä–∞—à–∫–∞": "üíñ",
  "–Ü–≥—Ä–æ–≤–∏–π –∫–æ—Å—Ç—é–º": "üëØ‚Äç‚ôÄÔ∏è",
  "–ó–±—É–¥–∂—É—é—á—ñ –∑–∞—Å–æ–±–∏": "üå∂Ô∏è"
};

// --- Mapping for API requests (UPDATED HERE for "–ï—Ä–µ–∫—Ü—ñ–π–Ω—ñ –∑–∞—Å–æ–±–∏" without rings) ---
const labelToCategories = {
  "–í–∞–≥—ñ–Ω–∞–ª—å–Ω–∞ —Å—Ç–∏–º—É–ª—è—Ü—ñ—è": ["915236", "915248", "915249", "915308", "915305", "915306", "915307", "915309", "915310", "915245", "915348"],
  "–ö–ª—ñ—Ç–æ—Ä–∞–ª—å–Ω–∞ —Å—Ç–∏–º—É–ª—è—Ü—ñ—è": ["915346", "915309", "915305", "915340", "915235", "915234", "915342", "915343", "915347", "915241", "915344"],
  "–ê–Ω–∞–ª—å–Ω–∞ —Å—Ç–∏–º—É–ª—è—Ü—ñ—è": ["915170", "915184", "915185", "915186", "915187", "915188", "915189", "915190", "915191"],
  "–ï—Ä–µ–∫—Ü—ñ–π–Ω—ñ –∑–∞—Å–æ–±–∏": ["915172", "915197", "915198", "915199", "915200"], // –û–ù–û–í–õ–ï–ù–û: –¢–µ–ø–µ—Ä —Ç—ñ–ª—å–∫–∏ –∑–±—É–¥–∂—É—é—á—ñ –∑–∞—Å–æ–±–∏ (–±–µ–∑ –∫—ñ–ª–µ—Ü—å)
  "–ï–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞–ª—å–Ω—ñ —ñ–≥—Ä–∞—à–∫–∏": ["915174", "915222", "915223", "915224", "915225", "915226", "915227", "915228", "915229", "915230", "915231", "915232", "915233"],
  "–°—Ü–µ–Ω–∞—Ä–Ω–∏–π –Ω–∞–±—ñ—Ä": ["915256"],
  "–ú–∞—Å—Ç—É—Ä–±–∞—Ç–æ—Ä–∏": ["915252", "915291", "915292", "915293"],
  "–ö—ñ–ª—å—Ü—è": ["915251", "915288", "915289", "915290"], // –ó–∞–ª–∏—à–∞—î—Ç—å—Å—è –æ–∫—Ä–µ–º–æ, —è–∫ –æ–ø—Ü—ñ—è —É –∫–≤—ñ–∑—ñ
  "–í—ñ–±—Ä–∞—Ç–æ—Ä–∏ –¥–ª—è –¥–≤–æ—Ö": ["915255"],
  "–Ü–≥—Ä–æ–≤—ñ –Ω–∞–±–æ—Ä–∏": ["915256", "915259", "915303"],
  "–°—Ç—Ä–∞–ø–æ–Ω–∏": ["915258", "915299", "915300", "915301", "915302"],
  "–Ü–Ω—Ç–∏–º–Ω–∞ –∫–æ—Å–º–µ—Ç–∏–∫–∞": ["915194", "915268", "915269", "915270", "915271", "915272"],
  "–ó–º–∞–∑–∫–∏": ["915192", "915260", "915261", "915262", "915263", "915264"],
  "–ü—Ä–µ–∑–µ—Ä–≤–∞—Ç–∏–≤–∏": ["915193", "915265", "915266", "915267"],
  "–î–æ–≥–ª—è–¥ –∑–∞ —Ç—ñ–ª–æ–º": ["915271"],
  "–ë–µ–∑–ø–µ–∫–∞": ["915193"],
  "–ú–µ–Ω—Å—Ç—Ä—É–∞–ª—å–Ω—ñ —Ç–æ–≤–∞—Ä–∏": ["915196"],
  "–£–Ω—ñ–≤–µ—Ä—Å–∞–ª—å–Ω–∏–π –Ω–∞–±—ñ—Ä": ["915256"],
  "–ü–∞—Ä—Ñ—É–º–∏": ["915195", "915273", "915274"],
  "–°–µ–∫—Å-—ñ–≥—Ä–∞—à–∫–∞": ["915169"],
  "–Ü–≥—Ä–æ–≤–∏–π –∫–æ—Å—Ç—é–º": ["915206"]
};

// --- Logic ---
async function initializeQuiz() {
  try {
    const response = await fetch('steps.json');
    if (!response.ok) throw new Error('Network response was not ok');
    quizData = await response.json();
    totalSteps = Object.keys(quizData).filter(k => quizData[k].question).length / 2;
    renderStep();
  } catch (error) {
    console.error('Failed to load quiz data:', error);
    if(questionTitleEl) questionTitleEl.textContent = '–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è';
    if(optionsEl) optionsEl.innerHTML = '<p class="error-message">–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –∫–≤—ñ–∑.</p>';
  }
}

function renderStep() {
  const currentStepKey = stepHistory[stepHistory.length - 1];
  const step = quizData[currentStepKey];

  if (!step) {
    if(questionTitleEl) questionTitleEl.textContent = "–ì–æ—Ç—É—î–º–æ —Ç–æ–≤–∞—Ä–∏ –¥–ª—è –≤–∏–±–æ—Ä—É...";
    if(optionsEl) optionsEl.innerHTML = '<div class="loader"></div>';
    if(nextBtn) nextBtn.style.display = 'none';
    if(backBtn) backBtn.style.display = 'none';

    const allAnswers = Object.values(userAnswers).flat();
    let uniqueCategoryIds = [];

    allAnswers.forEach(answerLabel => {
      const categoryMapping = labelToCategories[answerLabel];
      if (Array.isArray(categoryMapping)) {
        uniqueCategoryIds.push(...categoryMapping);
      } else if (categoryMapping) {
        uniqueCategoryIds.push(categoryMapping);
      }
    });

    uniqueCategoryIds = [...new Set(uniqueCategoryIds)];

    const params = new URLSearchParams();
    uniqueCategoryIds.forEach(id => params.append('a', id));

    if (userAnswers['step1_1']) {
        sessionStorage.setItem('gender', userAnswers['step1_1'][0]);
    } else {
        sessionStorage.removeItem('gender');
    }

    setTimeout(() => {
      window.location.href = `swipe.html?${params.toString()}`;
    }, 1500);
    return;
  }

  if(questionTitleEl) questionTitleEl.textContent = step.question;
  if(optionsEl) {
    optionsEl.innerHTML = "";
    optionsEl.className = step.multiple ? 'options multiple-choice' : 'options single-choice';
  }

  step.options.forEach(opt => {
    const isSelected = (userAnswers[currentStepKey] || []).includes(opt.label);
    const card = createOptionCard(opt, step.multiple, isSelected);
    if(optionsEl) optionsEl.appendChild(card);
  });

  updateNavigation(step);
  updateProgressBar();
}

function createOptionCard(option, isMultiple, isSelected) {
  const card = document.createElement("button");
  card.className = 'option-card';
  if (isSelected) card.classList.add('selected');

  const emoji = optionEmojis[option.label] || '‚ùì';

  card.innerHTML = `
    <div class="option-emoji">${emoji}</div>
    <span class="option-label">${option.label}</span>
    <div class="radio-check">${isMultiple ? '‚úîÔ∏è' : ''}</div>
  `;
  card.onclick = () => handleOptionClick(card, option, isMultiple);
  return card;
}

function handleOptionClick(cardElement, option, isMultiple) {
  const currentStepKey = stepHistory[stepHistory.length - 1];

  if (isMultiple) {
    cardElement.classList.toggle('selected');
    const currentSelections = userAnswers[currentStepKey] || [];
    if (cardElement.classList.contains('selected')) {
      userAnswers[currentStepKey] = [...currentSelections, option.label];
    } else {
      userAnswers[currentStepKey] = currentSelections.filter(ans => ans !== option.label);
    }
    updateNavigation(quizData[currentStepKey]);
  } else {
    userAnswers[currentStepKey] = [option.label];
    stepHistory.push(option.next || null);
    renderStep();
  }
}

function updateNavigation(step) {
  if(backBtn) backBtn.style.display = stepHistory.length > 1 ? 'flex' : 'none';

  if (step.multiple) {
    const hasSelection = (userAnswers[stepHistory[stepHistory.length - 1]] || []).length > 0;
    if(nextBtn) {
        nextBtn.style.display = 'flex';
        nextBtn.disabled = !hasSelection;
    }
  } else {
    if(nextBtn) nextBtn.style.display = 'none';
  }
}

function updateProgressBar() {
    const progress = (stepHistory.length / totalSteps) * 100;
    if(progressBar) progressBar.style.width = `${Math.min(progress, 100)}%`;
}

if(nextBtn) {
    nextBtn.onclick = () => {
      const currentStepKey = stepHistory[stepHistory.length - 1];
      const step = quizData[currentStepKey];
      stepHistory.push(step.next || null);
      renderStep();
    };
}

if(backBtn) {
    backBtn.onclick = () => {
      if (stepHistory.length > 1) {
        const lastStepKey = stepHistory.pop();
        delete userAnswers[lastStepKey];
        const prevStepKey = stepHistory[stepHistory.length-1];
        delete userAnswers[prevStepKey];
        renderStep();
      }
    };
}

// --- Initial Load ---
initializeQuiz();